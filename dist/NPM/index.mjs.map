{
	"version":
		3,
	"file":
		"index.mjs",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","newRegExp.ts","clearRegExp.ts","../../j-groupify/src/groupify.ts","export.ts"],
	"sourcesContent":
		[
			"export default '5.3.0';",
			"import RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\n\nvar NT = /[\\n\\t]/g;\n\nfunction Source (raw                       , substitutions                       )         {\n\tvar source         = raw[0];\n\tfor ( var length         = substitutions.length, index         = 0; index<length; ) {\n\t\tvar substitution                  = substitutions[index];\n\t\tsource += ( substitution instanceof RegExp ? substitution.source : substitution )+raw[++index];\n\t}\n\treturn source.replace(NT, '');\n}\n\nvar newRegExp            =\n\t/*#__PURE__*/\n\tfunction (newRegExp, createNewRegExpWith) {\n\t\t\n\t\t( function recursion (pickedFlags            , restFlags       )       {\n\t\t\tif ( restFlags ) {\n\t\t\t\trecursion(pickedFlags+restFlags.charAt(0)         , restFlags = restFlags.slice(1)         );\n\t\t\t\trecursion(pickedFlags, restFlags);\n\t\t\t}\n\t\t\telse if ( pickedFlags ) {\n\t\t\t\tnewRegExp[pickedFlags] = createNewRegExpWith(pickedFlags);\n\t\t\t}\n\t\t} )('', 'gimsuy');\n\t\t\n\t\treturn newRegExp;\n\t\t\n\t}(\n\t\tfunction newRegExp (template                      )         {\n\t\t\treturn new RegExp(Source(template.raw, slice.call(arguments, 1)));\n\t\t}             ,\n\t\t\n\t\tfunction createNewRegExpWith (flags       ) {\n\t\t\treturn ( {}        )['newRegExp.'+flags] = function (template                      )         {\n\t\t\t\treturn new RegExp(Source(template.raw, slice.call(arguments, 1)), flags);\n\t\t\t};\n\t\t}\n\t);\n\nexport default newRegExp;\n\n                                                   \n\n                                                                                                \n\n            \n\t\n\t                                                                                                                                                                                                                                                                             \n\t \n\t                                                                                                                             \n\t \n\t                                                         \n\t \n\t                         \n\t \n\t          \n\t \n\t    \n",
			"import RegExp from '.RegExp';\n\nvar clearRegExp = '$_' in RegExp\n\t? function () {\n\t\tvar REGEXP = /^/;\n\t\treturn function clearRegExp                (value    )                {\n\t\t\tREGEXP.test('');\n\t\t\treturn value;\n\t\t};\n\t}()\n\t: function clearRegExp                (value    )                {\n\t\treturn value;\n\t};\n\nexport default clearRegExp;",
			"import create from '.Object.create?=';\n\nvar NEED_TO_ESCAPE_IN_REGEXP = /^[$()*+\\-.?[\\\\\\]^{|]/;\nvar SURROGATE_PAIR = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nvar GROUP        = create(null);\n\nexport default function groupify (branches          , uFlag          , noEscape          )         {\n\tvar group        = create(null);\n\tvar appendBranch = uFlag ? appendPointBranch : appendCodeBranch;\n\tfor ( var length         = branches.length, index         = 0; index<length; ++index ) { appendBranch(group, branches[index]); }\n\treturn sourcify(group, !noEscape);\n};\n\nfunction appendPointBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar char         = SURROGATE_PAIR.test(branch) ? branch.slice(0, 2) : branch.charAt(0);\n\t\tappendPointBranch(group[char] || ( group[char] = create(null) ), branch.slice(char.length));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction appendCodeBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar char         = branch.charAt(0);\n\t\tappendCodeBranch(group[char] || ( group[char] = create(null) ), branch.slice(1));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction sourcify (group       , needEscape         )         {\n\tvar branches           = [];\n\tvar singleCharactersBranch           = [];\n\tvar noEmptyBranch          = true;\n\tfor ( var char in group ) {\n\t\tif ( char ) {\n\t\t\tvar sub_branches         = sourcify(group[char], needEscape);\n\t\t\tif ( needEscape && NEED_TO_ESCAPE_IN_REGEXP.test(char) ) { char = '\\\\'+char; }\n\t\t\tsub_branches ? branches.push(char+sub_branches) : singleCharactersBranch.push(char);\n\t\t}\n\t\telse { noEmptyBranch = false; }\n\t}\n\tsingleCharactersBranch.length && branches.unshift(singleCharactersBranch.length===1 ? singleCharactersBranch[0] : '['+singleCharactersBranch.join('')+']');\n\treturn branches.length===0\n\t\t? ''\n\t\t: ( branches.length===1 && ( singleCharactersBranch.length || noEmptyBranch )\n\t\t\t? branches[0]\n\t\t\t: '(?:'+branches.join('|')+')'\n\t\t)\n\t\t+( noEmptyBranch ? '' : '?' );\n}\n\n                                       \n",
			"import version from './version?text';\nimport newRegExp from './newRegExp';\nimport clearRegExp from './clearRegExp';\nimport groupify from './groupify';\n\nexport { version, newRegExp, clearRegExp, groupify };\n\nimport Default from '.default?=';\nexport default Default(newRegExp, {\n\tversion: version,\n\tnewRegExp: newRegExp,\n\tclearRegExp: clearRegExp,\n\tgroupify: groupify\n});"
		],
	"names":
		[],
	"mappings":
		"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"
}