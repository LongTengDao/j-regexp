{
	"version":
		3,
	"file":
		"index.mjs",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","newRegExp.ts","clearRegExp.ts","../../j-groupify/src/groupify.ts","export.ts"],
	"sourcesContent":
		[
			"export default '5.2.0';",
			"import RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\n\nvar NT = /[\\n\\t]/g;\n\nfunction Source (raw :ReadonlyArray<string>, substitutions :( RegExp | string )[]) :string {\n\tvar source :string = raw[0];\n\tfor ( var length :number = substitutions.length, index :number = 0; index<length; ) {\n\t\tvar substitution :RegExp | string = substitutions[index];\n\t\tsource += ( substitution instanceof RegExp ? substitution.source : substitution )+raw[++index];\n\t}\n\treturn source.replace(NT, '');\n}\n\nvar newRegExp :newRegExp =\n\t/*#__PURE__*/\n\tfunction (newRegExp, createNewRegExpWith) {\n\t\t\n\t\t( function recursion (pickedFlags :FLAGS | '', restFlags :FLAGS) :void {\n\t\t\tif ( restFlags ) {\n\t\t\t\trecursion(pickedFlags+restFlags.charAt(0) as FLAGS, restFlags = restFlags.slice(1) as FLAGS);\n\t\t\t\trecursion(pickedFlags, restFlags);\n\t\t\t}\n\t\t\telse if ( pickedFlags ) {\n\t\t\t\tnewRegExp[pickedFlags] = createNewRegExpWith(pickedFlags);\n\t\t\t}\n\t\t} )('', 'gimsuy');\n\t\t\n\t\treturn newRegExp;\n\t\t\n\t}(\n\t\tfunction newRegExp (template :TemplateStringsArray) :RegExp {\n\t\t\treturn new RegExp(Source(template.raw, slice.call(arguments, 1)));\n\t\t} as newRegExp,\n\t\t\n\t\tfunction createNewRegExpWith (flags :FLAGS) {\n\t\t\treturn ( {} as any )['newRegExp.'+flags] = function (template :TemplateStringsArray) :RegExp {\n\t\t\t\treturn new RegExp(Source(template.raw, slice.call(arguments, 1)), flags);\n\t\t\t};\n\t\t}\n\t);\n\nexport default newRegExp;\n\ntype newRegExp = func & { [flags in FLAGS] :func };\n\ntype func = (template :TemplateStringsArray, ...substitutions :( RegExp | string )[]) => RegExp;\n\ntype FLAGS =\n\t\n\t'gimsuy' | 'gimsu' | 'gimsy' | 'gims' | 'gimuy' | 'gimu' | 'gimy' | 'gim' | 'gisuy' | 'gisu' | 'gisy' | 'gis' | 'giuy' | 'giu' | 'giy' | 'gi' | 'gmsuy' | 'gmsu' | 'gmsy' | 'gms' | 'gmuy' | 'gmu' | 'gmy' | 'gm' | 'gsuy' | 'gsu' | 'gsy' | 'gs' | 'guy' | 'gu' | 'gy' | 'g'\n\t|\n\t'imsuy' | 'imsu' | 'imsy' | 'ims' | 'imuy' | 'imu' | 'imy' | 'im' | 'isuy' | 'isu' | 'isy' | 'is' | 'iuy' | 'iu' | 'iy' | 'i'\n\t|\n\t'msuy' | 'msu' | 'msy' | 'ms' | 'muy' | 'mu' | 'my' | 'm'\n\t|\n\t'suy' | 'su' | 'sy' | 's'\n\t|\n\t'uy' | 'u'\n\t|\n\t'y';\n",
			"import RegExp from '.RegExp';\n\nvar clearRegExp = '$_' in RegExp\n\t? function () {\n\t\tvar REGEXP = /^/;\n\t\treturn function clearRegExp<T extends any> (value? :T) :undefined | T {\n\t\t\tREGEXP.test('');\n\t\t\treturn value;\n\t\t};\n\t}()\n\t: function clearRegExp<T extends any> (value? :T) :undefined | T {\n\t\treturn value;\n\t};\n\nexport default clearRegExp;",
			"import create from '.Object.create?=';\n\nvar NEED_TO_ESCAPE_IN_REGEXP = /^[$()*+\\-.?[\\\\\\]^{|]/;\nvar SURROGATE_PAIR = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nvar GROUP :Group = create(null);\n\nexport default function groupify (branches :string[], uFlag? :boolean, noEscape? :boolean) :string {\n\tvar group :Group = create(null);\n\tvar appendBranch = uFlag ? appendPointBranch : appendCodeBranch;\n\tfor ( var length :number = branches.length, index :number = 0; index<length; ++index ) { appendBranch(group, branches[index]); }\n\treturn sourcify(group, !noEscape);\n};\n\nfunction appendPointBranch (group :Group, branch :string) :void {\n\tif ( branch ) {\n\t\tvar char :string = SURROGATE_PAIR.test(branch) ? branch.slice(0, 2) : branch.charAt(0);\n\t\tappendPointBranch(group[char] || ( group[char] = create(null) ), branch.slice(char.length));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction appendCodeBranch (group :Group, branch :string) :void {\n\tif ( branch ) {\n\t\tvar char :string = branch.charAt(0);\n\t\tappendCodeBranch(group[char] || ( group[char] = create(null) ), branch.slice(1));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction sourcify (group :Group, needEscape :boolean) :string {\n\tvar branches :string[] = [];\n\tvar singleCharactersBranch :string[] = [];\n\tvar noEmptyBranch :boolean = true;\n\tfor ( var char in group ) {\n\t\tif ( char ) {\n\t\t\tvar sub_branches :string = sourcify(group[char], needEscape);\n\t\t\tif ( needEscape && NEED_TO_ESCAPE_IN_REGEXP.test(char) ) { char = '\\\\'+char; }\n\t\t\tsub_branches ? branches.push(char+sub_branches) : singleCharactersBranch.push(char);\n\t\t}\n\t\telse { noEmptyBranch = false; }\n\t}\n\tsingleCharactersBranch.length && branches.unshift(singleCharactersBranch.length===1 ? singleCharactersBranch[0] : '['+singleCharactersBranch.join('')+']');\n\treturn branches.length===0\n\t\t? ''\n\t\t: ( branches.length===1 && ( singleCharactersBranch.length || noEmptyBranch )\n\t\t\t? branches[0]\n\t\t\t: '(?:'+branches.join('|')+')'\n\t\t)\n\t\t+( noEmptyBranch ? '' : '?' );\n}\n\ntype Group = { [char :string] :Group };\n",
			"import version from './version?text';\nimport newRegExp from './newRegExp';\nimport clearRegExp from './clearRegExp';\nimport groupify from './groupify';\n\nexport { version, newRegExp, clearRegExp, groupify };\n\nimport Default from '.default';\nexport default Default(newRegExp, {\n\tversion: version,\n\tnewRegExp: newRegExp,\n\tclearRegExp: clearRegExp,\n\tgroupify: groupify\n});"
		],
	"names":
		[],
	"mappings":
		"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"
}