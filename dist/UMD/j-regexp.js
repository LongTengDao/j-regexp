/*!
 * 模块名称：@ltd/j-regexp
 * 模块功能：可读性更好的正则表达式创建方式。
   　　　　　More readable way for creating RegExp.
 * 模块版本：1.0.0
 * 许可条款：LGPL-3.0
 * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)
 * 问题反馈：https://GitHub.com/LongTengDao/j-regexp/issues
 * 项目主页：https://GitHub.com/LongTengDao/j-regexp/
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.jRegExp = factory());
}(this, function () { 'use strict';

    var version = '1.0.0';

    var slice = Array.prototype.slice;

    var NT = /[\n\t]/g;
    function Source(raw, substitutions) {
        var source = raw[0];
        for (var length = substitutions.length, index = 0; index < length;) {
            var substitution = substitutions[index];
            source += (typeof substitution === 'string' ? substitution : substitution.source) + raw[++index];
        }
        return source.replace(NT, '');
    }
    function newRegExp(template) {
        return RegExp(Source(template.raw, slice.call(arguments, 1)));
    }
    function NewRegExp(flags) {
        return function newRegExp(template) {
            return RegExp(Source(template.raw, slice.call(arguments, 1)), flags);
        };
    }
    var jRegExp = {
        newRegExp: newRegExp,
        NewRegExp: NewRegExp,
        version: version
    };
    jRegExp['default'] = jRegExp;

    return jRegExp;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnNpb24/dGV4dCIsImV4cG9ydC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnMS4wLjAnOyIsImltcG9ydCB2ZXJzaW9uIGZyb20gJy4vdmVyc2lvbj90ZXh0JztcbmV4cG9ydCB7IHZlcnNpb24gfTtcbmltcG9ydCBSZWdFeHAgZnJvbSAnLlJlZ0V4cCc7XG5pbXBvcnQgc2xpY2UgZnJvbSAnLkFycmF5LnByb3RvdHlwZS5zbGljZSc7XG52YXIgTlQgPSAvW1xcblxcdF0vZztcbmZ1bmN0aW9uIFNvdXJjZShyYXcsIHN1YnN0aXR1dGlvbnMpIHtcbiAgICB2YXIgc291cmNlID0gcmF3WzBdO1xuICAgIGZvciAodmFyIGxlbmd0aCA9IHN1YnN0aXR1dGlvbnMubGVuZ3RoLCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOykge1xuICAgICAgICB2YXIgc3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uc1tpbmRleF07XG4gICAgICAgIHNvdXJjZSArPSAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ3N0cmluZycgPyBzdWJzdGl0dXRpb24gOiBzdWJzdGl0dXRpb24uc291cmNlKSArIHJhd1srK2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKE5ULCAnJyk7XG59XG5mdW5jdGlvbiBuZXdSZWdFeHAodGVtcGxhdGUpIHtcbiAgICByZXR1cm4gUmVnRXhwKFNvdXJjZSh0ZW1wbGF0ZS5yYXcsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpO1xufVxuZXhwb3J0IHsgbmV3UmVnRXhwIH07XG5leHBvcnQgZnVuY3Rpb24gTmV3UmVnRXhwKGZsYWdzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5ld1JlZ0V4cCh0ZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gUmVnRXhwKFNvdXJjZSh0ZW1wbGF0ZS5yYXcsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSksIGZsYWdzKTtcbiAgICB9O1xufVxudmFyIGpSZWdFeHAgPSB7XG4gICAgbmV3UmVnRXhwOiBuZXdSZWdFeHAsXG4gICAgTmV3UmVnRXhwOiBOZXdSZWdFeHAsXG4gICAgdmVyc2lvbjogdmVyc2lvblxufTtcbmpSZWdFeHBbJ2RlZmF1bHQnXSA9IGpSZWdFeHA7XG5leHBvcnQgZGVmYXVsdCBqUmVnRXhwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1WNGNHOXlkQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFBRVUZQTEU5QlFVOHNUVUZCVFN4blFrRkJaMElzUTBGQlF6dEJRVU55UXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU03UVVGRmJrSXNUMEZCVHl4TlFVRk5MRTFCUVUwc1UwRkJVeXhEUVVGRE8wRkJRemRDTEU5QlFVOHNTMEZCU3l4TlFVRk5MSGRDUVVGM1FpeERRVUZETzBGQlJUTkRMRWxCUVVrc1JVRkJSU3hIUVVGSExGTkJRVk1zUTBGQlF6dEJRVVZ1UWl4VFFVRlRMRTFCUVUwc1EwRkJSU3hIUVVGSExFVkJRVVVzWVVGQllUdEpRVU5zUXl4SlFVRkpMRTFCUVUwc1IwRkJWeXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZETlVJc1MwRkJUU3hKUVVGSkxFMUJRVTBzUjBGQlZ5eGhRVUZoTEVOQlFVTXNUVUZCVFN4RlFVRkZMRXRCUVVzc1IwRkJWeXhEUVVGRExFVkJRVVVzUzBGQlN5eEhRVUZETEUxQlFVMHNSMEZCU1R0UlFVTnVSaXhKUVVGSkxGbEJRVmtzUjBGQmIwSXNZVUZCWVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJRM3BFTEUxQlFVMHNTVUZCU1N4RFFVRkZMRTlCUVU4c1dVRkJXU3hMUVVGSExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZGTEVkQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UzBGREwwWTdTVUZEUkN4UFFVRlBMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUXk5Q0xFTkJRVU03UVVGSFJDeFRRVUZUTEZOQlFWTXNRMEZCUlN4UlFVRTRRanRKUVVOcVJDeFBRVUZQTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUlVGQlJTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETDBRc1EwRkJRenRCUVVORUxFOUJRVThzUlVGQlJTeFRRVUZUTEVWQlFVVXNRMEZCUXp0QlFVVnlRaXhOUVVGTkxGVkJRVlVzVTBGQlV5eERRVUZGTEV0QlFXRTdTVUZEZGtNc1QwRkJUeXhUUVVGVExGTkJRVk1zUTBGQlJTeFJRVUU0UWp0UlFVTjRSQ3hQUVVGUExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBsQlEzUkZMRU5CUVVNc1EwRkJRenRCUVVOSUxFTkJRVU03UVVGRlJDeEpRVUZKTEU5QlFVOHNSMEZCUnp0SlFVTmlMRk5CUVZNc1JVRkJSU3hUUVVGVE8wbEJRM0JDTEZOQlFWTXNSVUZCUlN4VFFVRlRPMGxCUTNCQ0xFOUJRVThzUlVGQlJTeFBRVUZQTzBOQlEyaENMRU5CUVVNN1FVRkRSaXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRPMEZCUXpkQ0xHVkJRV1VzVDBGQlR5eERRVUZESWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhabGNuTnBiMjRnWm5KdmJTQW5MaTkyWlhKemFXOXVQM1JsZUhRbk8xeHVaWGh3YjNKMElIc2dkbVZ5YzJsdmJpQjlPMXh1WEc1cGJYQnZjblFnVW1WblJYaHdJR1p5YjIwZ0p5NVNaV2RGZUhBbk8xeHVhVzF3YjNKMElITnNhV05sSUdaeWIyMGdKeTVCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVbk8xeHVYRzUyWVhJZ1RsUWdQU0F2VzF4Y2JseGNkRjB2Wnp0Y2JseHVablZ1WTNScGIyNGdVMjkxY21ObElDaHlZWGNzSUhOMVluTjBhWFIxZEdsdmJuTXBJRHB6ZEhKcGJtY2dlMXh1WEhSMllYSWdjMjkxY21ObElEcHpkSEpwYm1jZ1BTQnlZWGRiTUYwN1hHNWNkR1p2Y2lBb0lIWmhjaUJzWlc1bmRHZ2dPbTUxYldKbGNpQTlJSE4xWW5OMGFYUjFkR2x2Ym5NdWJHVnVaM1JvTENCcGJtUmxlQ0E2Ym5WdFltVnlJRDBnTURzZ2FXNWtaWGc4YkdWdVozUm9PeUFwSUh0Y2JseDBYSFIyWVhJZ2MzVmljM1JwZEhWMGFXOXVJRHB6ZEhKcGJtY2dmQ0JTWldkRmVIQWdQU0J6ZFdKemRHbDBkWFJwYjI1elcybHVaR1Y0WFR0Y2JseDBYSFJ6YjNWeVkyVWdLejBnS0NCMGVYQmxiMllnYzNWaWMzUnBkSFYwYVc5dVBUMDlKM04wY21sdVp5Y2dQeUJ6ZFdKemRHbDBkWFJwYjI0Z09pQnpkV0p6ZEdsMGRYUnBiMjR1YzI5MWNtTmxJQ2tyY21GM1d5c3JhVzVrWlhoZE8xeHVYSFI5WEc1Y2RISmxkSFZ5YmlCemIzVnlZMlV1Y21Wd2JHRmpaU2hPVkN3Z0p5Y3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnVaWGRTWldkRmVIQWdLSFJsYlhCc1lYUmxJRHBVWlcxd2JHRjBaVk4wY21sdVozTkJjbkpoZVN3Z0xpNHVjM1ZpYzNScGRIVjBhVzl1Y3lBNktDQnpkSEpwYm1jZ2ZDQlNaV2RGZUhBZ0tWdGRLU0E2VW1WblJYaHdPMXh1Wm5WdVkzUnBiMjRnYm1WM1VtVm5SWGh3SUNoMFpXMXdiR0YwWlNBNlZHVnRjR3hoZEdWVGRISnBibWR6UVhKeVlYa3BJRHBTWldkRmVIQWdlMXh1WEhSeVpYUjFjbTRnVW1WblJYaHdLRk52ZFhKalpTaDBaVzF3YkdGMFpTNXlZWGNzSUhOc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SekxDQXhLU2twTzF4dWZWeHVaWGh3YjNKMElIc2dibVYzVW1WblJYaHdJSDA3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCT1pYZFNaV2RGZUhBZ0tHWnNZV2R6SURwemRISnBibWNwSURwMGVYQmxiMllnYm1WM1VtVm5SWGh3SUh0Y2JseDBjbVYwZFhKdUlHWjFibU4wYVc5dUlHNWxkMUpsWjBWNGNDQW9kR1Z0Y0d4aGRHVWdPbFJsYlhCc1lYUmxVM1J5YVc1bmMwRnljbUY1S1NBNlVtVm5SWGh3SUh0Y2JseDBYSFJ5WlhSMWNtNGdVbVZuUlhod0tGTnZkWEpqWlNoMFpXMXdiR0YwWlM1eVlYY3NJSE5zYVdObExtTmhiR3dvWVhKbmRXMWxiblJ6TENBeEtTa3NJR1pzWVdkektUdGNibHgwZlR0Y2JuMWNibHh1ZG1GeUlHcFNaV2RGZUhBZ1BTQjdYRzVjZEc1bGQxSmxaMFY0Y0RvZ2JtVjNVbVZuUlhod0xGeHVYSFJPWlhkU1pXZEZlSEE2SUU1bGQxSmxaMFY0Y0N4Y2JseDBkbVZ5YzJsdmJqb2dkbVZ5YzJsdmJseHVmVHRjYm1wU1pXZEZlSEJiSjJSbFptRjFiSFFuWFNBOUlHcFNaV2RGZUhBN1hHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCcVVtVm5SWGh3TzF4dUlsMTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxrQkFBZSxPQUFPOzs7OzBCQUFDLHRCQ0l2QixJQUFJLEVBQUUsR0FBRyxTQUFTLENBQUM7SUFDbkIsU0FBUyxNQUFNLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRTtJQUNwQyxJQUFJLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4QixJQUFJLEtBQUssSUFBSSxNQUFNLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxNQUFNLEdBQUc7SUFDeEUsUUFBUSxJQUFJLFlBQVksR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsUUFBUSxNQUFNLElBQUksQ0FBQyxPQUFPLFlBQVksS0FBSyxRQUFRLEdBQUcsWUFBWSxHQUFHLFlBQVksQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDekcsS0FBSztJQUNMLElBQUksT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0QsU0FBUyxTQUFTLENBQUMsUUFBUSxFQUFFO0lBQzdCLElBQUksT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7QUFDRCxJQUNPLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRTtJQUNqQyxJQUFJLE9BQU8sU0FBUyxTQUFTLENBQUMsUUFBUSxFQUFFO0lBQ3hDLFFBQVEsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3RSxLQUFLLENBQUM7SUFDTixDQUFDO0lBQ0QsSUFBSSxPQUFPLEdBQUc7SUFDZCxJQUFJLFNBQVMsRUFBRSxTQUFTO0lBQ3hCLElBQUksU0FBUyxFQUFFLFNBQVM7SUFDeEIsSUFBSSxPQUFPLEVBQUUsT0FBTztJQUNwQixDQUFDLENBQUM7SUFDRixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDOzs7Ozs7OzsiLCJzb3VyY2VSb290IjoiLi4vLi4vc3JjLyJ9