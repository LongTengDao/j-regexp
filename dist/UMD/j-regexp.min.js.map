{
	"version":
		3,
	"file":
		"j-regexp.min.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","newRegExp.ts","clearRegExp.ts","../../j-groupify/src/groupify.ts","export.ts"],
	"sourcesContent":
		[
			"export default '6.0.0';",
			"import RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\n\nvar NT = /[\\n\\t]/g;\n\nfunction Source (raw                       , substitutions                       )         {\n\tvar source         = raw[0];\n\tfor ( var length         = substitutions.length, index         = 0; index<length; ) {\n\t\tvar substitution                  = substitutions[index];\n\t\tsource += ( substitution instanceof RegExp ? substitution.source : substitution )+raw[++index];\n\t}\n\treturn source.replace(NT, '');\n}\n\n                                                                                                     \nexport default function newRegExp (flags_template                               )                     {\n\treturn typeof flags_template==='string'\n\t\t? function newRegExp (template                      )         {\n\t\t\treturn new RegExp(\n\t\t\t\t/*#__PURE__*/Source(\n\t\t\t\t\ttemplate.raw,\n\t\t\t\t\t/*#__PURE__*/slice.call(arguments, 1)\n\t\t\t\t),\n\t\t\t\tflags_template\n\t\t\t);\n\t\t}\n\t\t: new RegExp(\n\t\t\t/*#__PURE__*/Source(\n\t\t\t\tflags_template.raw,\n\t\t\t\t/*#__PURE__*/slice.call(arguments, 1)\n\t\t\t)\n\t\t);\n};\n",
			"import RegExp from '.RegExp';\n\nvar clearRegExp = '$_' in RegExp\n\t? function () {\n\t\tvar REGEXP = /^/;\n\t\treturn function clearRegExp                (value    )                {\n\t\t\tREGEXP.test('');\n\t\t\treturn value;\n\t\t};\n\t}()\n\t: function clearRegExp                (value    )                {\n\t\treturn value;\n\t};\n\nexport default clearRegExp;",
			"import create from '.Object.create?=';\n\nvar NEED_TO_ESCAPE_IN_REGEXP = /^[$()*+\\-.?[\\\\\\]^{|]/;\nvar SURROGATE_PAIR = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nvar GROUP        = create(null);\n\nexport default function groupify (branches          , uFlag          , noEscape          )         {\n\tvar group        = create(null);\n\tvar appendBranch = uFlag ? appendPointBranch : appendCodeBranch;\n\tfor ( var length         = branches.length, index         = 0; index<length; ++index ) { appendBranch(group, branches[index]); }\n\treturn sourcify(group, !noEscape);\n};\n\nfunction appendPointBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar char         = SURROGATE_PAIR.test(branch) ? branch.slice(0, 2) : branch.charAt(0);\n\t\tappendPointBranch(group[char] || ( group[char] = create(null) ), branch.slice(char.length));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction appendCodeBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar char         = branch.charAt(0);\n\t\tappendCodeBranch(group[char] || ( group[char] = create(null) ), branch.slice(1));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction sourcify (group       , needEscape         )         {\n\tvar branches           = [];\n\tvar singleCharactersBranch           = [];\n\tvar noEmptyBranch          = true;\n\tfor ( var char in group ) {\n\t\tif ( char ) {\n\t\t\tvar sub_branches         = sourcify(group[char], needEscape);\n\t\t\tif ( needEscape && NEED_TO_ESCAPE_IN_REGEXP.test(char) ) { char = '\\\\'+char; }\n\t\t\tsub_branches ? branches.push(char+sub_branches) : singleCharactersBranch.push(char);\n\t\t}\n\t\telse { noEmptyBranch = false; }\n\t}\n\tsingleCharactersBranch.length && branches.unshift(singleCharactersBranch.length===1 ? singleCharactersBranch[0] : '['+singleCharactersBranch.join('')+']');\n\treturn branches.length===0\n\t\t? ''\n\t\t: ( branches.length===1 && ( singleCharactersBranch.length || noEmptyBranch )\n\t\t\t? branches[0]\n\t\t\t: '(?:'+branches.join('|')+')'\n\t\t)\n\t\t+( noEmptyBranch ? '' : '?' );\n}\n\n                                       \n",
			"import version from './version?text';\nimport newRegExp from './newRegExp';\nimport clearRegExp from './clearRegExp';\nimport groupify from './groupify';\n\nexport {\n\tversion,\n\tnewRegExp,\n\tclearRegExp,\n\tgroupify,\n};\n\nimport Default from '.default?=';\nexport default Default(newRegExp, {\n\tversion: version,\n\tnewRegExp: newRegExp,\n\tclearRegExp: clearRegExp,\n\tgroupify: groupify\n});\n"
		],
	"names":
		["NT","Source","raw","substitutions","source","length","index","substitution","RegExp","replace","newRegExp","flags_template","template","slice","call","arguments","REGEXP","clearRegExp","value","test","NEED_TO_ESCAPE_IN_REGEXP","SURROGATE_PAIR","GROUP","create","appendPointBranch","group","branch","char","charAt","appendCodeBranch","Default","version","groupify","branches","uFlag","noEscape","appendBranch","sourcify","needEscape","singleCharactersBranch","noEmptyBranch","sub_branches","push","unshift","join"],
	"mappings":
		";;;;;;;;;;gMAAA,4BCGIA,EAAK,UAET,SAASC,EAAQC,EAA4BC,GAE5C,IADA,IAAIC,EAAiBF,EAAI,GACfG,EAAiBF,EAAcE,OAAQC,EAAgB,EAAGA,EAAMD,GAAU,CACnF,IAAIE,EAAgCJ,EAAcG,GAClDF,IAAYG,aAAwBC,OAASD,EAAaH,OAASG,GAAeL,IAAMI,GAEzF,OAAOF,EAAOK,QAAQT,EAAI,IAIZ,SAASU,EAAWC,GAClC,MAA+B,iBAAjBA,EACX,SAAoBC,GACrB,OAAO,IAAIJ,OACGP,EACZW,EAASV,IACIW,EAAMC,KAAKC,UAAW,IAEpCJ,IAGA,IAAIH,OACQP,EACZU,EAAeT,IACFW,EAAMC,KAAKC,UAAW,KC3BvC,IAEMC,EAFFC,EAAc,OAAQT,QAEpBQ,EAAS,IACN,SAAqCE,GAE3C,OADAF,EAAOG,KAAK,IACLD,IAGP,SAAqCA,GACtC,OAAOA,mnCCTLE,EAA2B,uBAC3BC,EAAiB,kCACjBC,EAAeC,EAAO,MAS1B,SAASC,EAAmBC,EAAcC,GACzC,GAAKA,EAAS,CACb,IAAIC,EAAeN,EAAeF,KAAKO,GAAUA,EAAOb,MAAM,EAAG,GAAKa,EAAOE,OAAO,GACpFJ,EAAkBC,EAAME,KAAWF,EAAME,GAAQJ,EAAO,OAASG,EAAOb,MAAMc,EAAKtB,cAE7EoB,EAAM,IAAMH,EAGpB,SAASO,EAAkBJ,EAAcC,GACxC,GAAKA,EAAS,CACb,IAAIC,EAAeD,EAAOE,OAAO,GACjCC,EAAiBJ,EAAME,KAAWF,EAAME,GAAQJ,EAAO,OAASG,EAAOb,MAAM,SAEvEY,EAAM,IAAMH,kdCbLQ,CAAQpB,EAAW,CACjCqB,QJdc,QIedrB,UAAWA,EACXO,YAAaA,EACbe,SDXD,SAAkCC,EAAoBC,EAAiBC,GAGtE,IAFA,IAAIV,EAAeF,EAAO,MACtBa,EAAeF,EAAQV,EAAoBK,EACrCxB,EAAiB4B,EAAS5B,OAAQC,EAAgB,EAAGA,EAAMD,IAAUC,EAAU8B,EAAaX,EAAOQ,EAAS3B,IACtH,OAmBD,SAAS+B,EAAUZ,EAAca,GAChC,IAAIL,EAAqB,GACzB,IAAIM,EAAmC,GACvC,IAAIC,GAAyB,EAC7B,IAAM,IAAIb,KAAQF,EACjB,GAAKE,EAAO,CACX,IAAIc,EAAuBJ,EAASZ,EAAME,GAAOW,GAC5CA,GAAclB,EAAyBD,KAAKQ,KAAUA,EAAO,KAAKA,GACvEc,EAAeR,EAASS,KAAKf,EAAKc,GAAgBF,EAAuBG,KAAKf,QAExEa,GAAgB,EAExBD,EAAuBlC,QAAU4B,EAASU,QAAwC,IAAhCJ,EAAuBlC,OAAakC,EAAuB,GAAK,IAAIA,EAAuBK,KAAK,IAAI,KACtJ,OAAyB,IAAlBX,EAAS5B,OACb,IACoB,IAAlB4B,EAAS5B,SAAgBkC,EAAuBlC,QAAUmC,GAC3DP,EAAS,GACT,MAAMA,EAASW,KAAK,KAAK,MAEzBJ,EAAgB,GAAK,KAtClBH,CAASZ,GAAQU"
}