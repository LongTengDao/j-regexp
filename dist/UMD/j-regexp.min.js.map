{
	"version":
		3,
	"file":
		"j-regexp.min.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","newRegExp.ts","clearRegExp.ts","../../j-groupify/src/groupify.ts","export.ts"],
	"sourcesContent":
		[
			"export default '5.3.0';",
			"import RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\n\nvar NT = /[\\n\\t]/g;\n\nfunction Source (raw                       , substitutions                       )         {\n\tvar source         = raw[0];\n\tfor ( var length         = substitutions.length, index         = 0; index<length; ) {\n\t\tvar substitution                  = substitutions[index];\n\t\tsource += ( substitution instanceof RegExp ? substitution.source : substitution )+raw[++index];\n\t}\n\treturn source.replace(NT, '');\n}\n\nvar newRegExp            =\n\t/*#__PURE__*/\n\tfunction (newRegExp, createNewRegExpWith) {\n\t\t\n\t\t( function recursion (pickedFlags            , restFlags       )       {\n\t\t\tif ( restFlags ) {\n\t\t\t\trecursion(pickedFlags+restFlags.charAt(0)         , restFlags = restFlags.slice(1)         );\n\t\t\t\trecursion(pickedFlags, restFlags);\n\t\t\t}\n\t\t\telse if ( pickedFlags ) {\n\t\t\t\tnewRegExp[pickedFlags] = createNewRegExpWith(pickedFlags);\n\t\t\t}\n\t\t} )('', 'gimsuy');\n\t\t\n\t\treturn newRegExp;\n\t\t\n\t}(\n\t\tfunction newRegExp (template                      )         {\n\t\t\treturn new RegExp(Source(template.raw, slice.call(arguments, 1)));\n\t\t}             ,\n\t\t\n\t\tfunction createNewRegExpWith (flags       ) {\n\t\t\treturn ( {}        )['newRegExp.'+flags] = function (template                      )         {\n\t\t\t\treturn new RegExp(Source(template.raw, slice.call(arguments, 1)), flags);\n\t\t\t};\n\t\t}\n\t);\n\nexport default newRegExp;\n\n                                                   \n\n                                                                                                \n\n            \n\t\n\t                                                                                                                                                                                                                                                                             \n\t \n\t                                                                                                                             \n\t \n\t                                                         \n\t \n\t                         \n\t \n\t          \n\t \n\t    \n",
			"import RegExp from '.RegExp';\n\nvar clearRegExp = '$_' in RegExp\n\t? function () {\n\t\tvar REGEXP = /^/;\n\t\treturn function clearRegExp                (value    )                {\n\t\t\tREGEXP.test('');\n\t\t\treturn value;\n\t\t};\n\t}()\n\t: function clearRegExp                (value    )                {\n\t\treturn value;\n\t};\n\nexport default clearRegExp;",
			"import create from '.Object.create?=';\n\nvar NEED_TO_ESCAPE_IN_REGEXP = /^[$()*+\\-.?[\\\\\\]^{|]/;\nvar SURROGATE_PAIR = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nvar GROUP        = create(null);\n\nexport default function groupify (branches          , uFlag          , noEscape          )         {\n\tvar group        = create(null);\n\tvar appendBranch = uFlag ? appendPointBranch : appendCodeBranch;\n\tfor ( var length         = branches.length, index         = 0; index<length; ++index ) { appendBranch(group, branches[index]); }\n\treturn sourcify(group, !noEscape);\n};\n\nfunction appendPointBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar char         = SURROGATE_PAIR.test(branch) ? branch.slice(0, 2) : branch.charAt(0);\n\t\tappendPointBranch(group[char] || ( group[char] = create(null) ), branch.slice(char.length));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction appendCodeBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar char         = branch.charAt(0);\n\t\tappendCodeBranch(group[char] || ( group[char] = create(null) ), branch.slice(1));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction sourcify (group       , needEscape         )         {\n\tvar branches           = [];\n\tvar singleCharactersBranch           = [];\n\tvar noEmptyBranch          = true;\n\tfor ( var char in group ) {\n\t\tif ( char ) {\n\t\t\tvar sub_branches         = sourcify(group[char], needEscape);\n\t\t\tif ( needEscape && NEED_TO_ESCAPE_IN_REGEXP.test(char) ) { char = '\\\\'+char; }\n\t\t\tsub_branches ? branches.push(char+sub_branches) : singleCharactersBranch.push(char);\n\t\t}\n\t\telse { noEmptyBranch = false; }\n\t}\n\tsingleCharactersBranch.length && branches.unshift(singleCharactersBranch.length===1 ? singleCharactersBranch[0] : '['+singleCharactersBranch.join('')+']');\n\treturn branches.length===0\n\t\t? ''\n\t\t: ( branches.length===1 && ( singleCharactersBranch.length || noEmptyBranch )\n\t\t\t? branches[0]\n\t\t\t: '(?:'+branches.join('|')+')'\n\t\t)\n\t\t+( noEmptyBranch ? '' : '?' );\n}\n\n                                       \n",
			"import version from './version?text';\nimport newRegExp from './newRegExp';\nimport clearRegExp from './clearRegExp';\nimport groupify from './groupify';\n\nexport { version, newRegExp, clearRegExp, groupify };\n\nimport Default from '.default?=';\nexport default Default(newRegExp, {\n\tversion: version,\n\tnewRegExp: newRegExp,\n\tclearRegExp: clearRegExp,\n\tgroupify: groupify\n});"
		],
	"names":
		["NT","Source","raw","substitutions","source","length","index","substitution","RegExp","replace","REGEXP","newRegExp","createNewRegExpWith","recursion","pickedFlags","restFlags","flags","charAt","slice","template","call","arguments","clearRegExp","value","test","NEED_TO_ESCAPE_IN_REGEXP","SURROGATE_PAIR","GROUP","create","appendPointBranch","group","branch","char","appendCodeBranch","Default","version","groupify","branches","uFlag","noEscape","appendBranch","sourcify","needEscape","singleCharactersBranch","noEmptyBranch","sub_branches","push","unshift","join"],
	"mappings":
		";;;;;;;;;;gMAAA,4BCGIA,EAAK,UAET,SAASC,EAAQC,EAA4BC,GAE5C,IADA,IAAIC,EAAiBF,EAAI,GACfG,EAAiBF,EAAcE,OAAQC,EAAgB,EAAGA,EAAMD,GAAU,CACnF,IAAIE,EAAgCJ,EAAcG,GAClDF,IAAYG,aAAwBC,OAASD,EAAaH,OAASG,GAAeL,IAAMI,GAEzF,OAAOF,EAAOK,QAAQT,EAAI,IAG3B,ICVMU,EDUFC,EAEH,SAAUA,EAAWC,GAYpB,OAVA,SAAWC,EAAWC,EAAyBC,GAiB/C,IAA8BC,EAhBxBD,GACJF,EAAUC,EAAYC,EAAUE,OAAO,GAAaF,EAAYA,EAAUG,MAAM,IAChFL,EAAUC,EAAaC,IAEdD,IACTH,EAAUG,GAYJ,GAAc,cADQE,EAXiBF,IAYH,SAAUK,GACpD,OAAO,IAAIX,OAAOP,EAAOkB,EAASjB,IAAKgB,EAAME,KAAKC,UAAW,IAAKL,KAnBpE,CAQI,GAAI,UAEDL,EAZR,CAeC,SAASA,EAAWQ,GACnB,OAAO,IAAIX,OAAOP,EAAOkB,EAASjB,IAAKgB,EAAME,KAAKC,UAAW,OC9B5DC,EAAc,OAAQd,QAEpBE,EAAS,IACN,SAAqCa,GAE3C,OADAb,EAAOc,KAAK,IACLD,IAGP,SAASD,EAA4BC,GACtC,OAAOA,6jDCTLE,EAA2B,uBAC3BC,EAAiB,kCACjBC,EAAeC,EAAO,MAS1B,SAASC,EAAmBC,EAAcC,GACzC,GAAKA,EAAS,CACb,IAAIC,EAAeN,EAAeF,KAAKO,GAAUA,EAAOb,MAAM,EAAG,GAAKa,EAAOd,OAAO,GACpFY,EAAkBC,EAAME,KAAWF,EAAME,GAAQJ,EAAO,OAASG,EAAOb,MAAMc,EAAK3B,cAE7EyB,EAAM,IAAMH,EAGpB,SAASM,EAAkBH,EAAcC,GACxC,GAAKA,EAAS,CACb,IAAIC,EAAeD,EAAOd,OAAO,GACjCgB,EAAiBH,EAAME,KAAWF,EAAME,GAAQJ,EAAO,OAASG,EAAOb,MAAM,SAEvEY,EAAM,IAAMH,SClBLO,EAAQvB,EAAW,CACjCwB,QJTc,QIUdxB,UAAWA,EACXW,YAAaA,EACbc,SDND,SAAwBA,EAAUC,EAAoBC,EAAiBC,GAGtE,IAFA,IAAIT,EAAeF,EAAO,MACtBY,EAAeF,EAAQT,EAAoBI,EACrC5B,EAAiBgC,EAAShC,OAAQC,EAAgB,EAAGA,EAAMD,IAAUC,EAAUkC,EAAaV,EAAOO,EAAS/B,IACtH,OAmBD,SAASmC,EAAUX,EAAcY,GAChC,IAAIL,EAAqB,GACrBM,EAAmC,GACnCC,GAAyB,EAC7B,IAAM,IAAIZ,KAAQF,EACjB,GAAKE,EAAO,CACX,IAAIa,EAAuBJ,EAASX,EAAME,GAAOU,GAC5CA,GAAcjB,EAAyBD,KAAKQ,KAAUA,EAAO,KAAKA,GACvEa,EAAeR,EAASS,KAAKd,EAAKa,GAAgBF,EAAuBG,KAAKd,QAExEY,GAAgB,EAGxB,OADAD,EAAuBtC,QAAUgC,EAASU,QAAwC,IAAhCJ,EAAuBtC,OAAasC,EAAuB,GAAK,IAAIA,EAAuBK,KAAK,IAAI,KAC7H,IAAlBX,EAAShC,OACb,IACoB,IAAlBgC,EAAShC,SAAgBsC,EAAuBtC,QAAUuC,GAC3DP,EAAS,GACT,MAAMA,EAASW,KAAK,KAAK,MAEzBJ,EAAgB,GAAK,KAtClBH,CAASX,GAAQS"
}