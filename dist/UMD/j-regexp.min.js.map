{
	"version":
		3,
	"file":
		"j-regexp.min.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","export.ts"],
	"sourcesContent":
		[
			"export default '1.1.0';",
			"import version from './version?text';\nexport { version };\n\nimport RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\n\nvar NT = /[\\n\\t]/g;\n\nfunction Source (raw, substitutions) :string {\n\tvar source :string = raw[0];\n\tfor ( var length :number = substitutions.length, index :number = 0; index<length; ) {\n\t\tvar substitution :string | RegExp = substitutions[index];\n\t\tsource += ( typeof substitution==='string' ? substitution : substitution.source )+raw[++index];\n\t}\n\treturn source.replace(NT, '');\n}\n\nfunction newRegExp (template :TemplateStringsArray, ...substitutions :( string | RegExp )[]) :RegExp;\nfunction newRegExp (template :TemplateStringsArray) :RegExp {\n\treturn RegExp(Source(template.raw, slice.call(arguments, 1)));\n}\nexport { newRegExp };\n\nexport function NewRegExp (flags :string) :typeof newRegExp {\n\treturn function newRegExp (template :TemplateStringsArray) :RegExp {\n\t\treturn RegExp(Source(template.raw, slice.call(arguments, 1)), flags);\n\t};\n}\n\nvar jRegExp = {\n\tnewRegExp: newRegExp,\n\tNewRegExp: NewRegExp,\n\tversion: version\n};\njRegExp['default'] = jRegExp;\nexport default jRegExp;\n"
		],
	"names":
		["NT","Source","raw","substitutions","source","length","index","substitution","replace","jRegExp","newRegExp","template","RegExp","slice","call","arguments","NewRegExp","flags","version"],
	"mappings":
		";;;;;;;;;;8LAAA,4BCMIA,EAAK,UAET,SAASC,EAAQC,EAAKC,GAErB,IADA,IAAIC,EAAiBF,EAAI,GACfG,EAAiBF,EAAcE,OAAQC,EAAgB,EAAGA,EAAMD,GAAU,CACnF,IAAIE,EAAgCJ,EAAcG,GAClDF,IAAkC,iBAAfG,EAA0BA,EAAeA,EAAaH,QAASF,IAAMI,GAEzF,OAAOF,EAAOI,QAAQR,EAAI,IAe3B,IAAIS,EAAU,CACbC,UAZD,SAASA,EAAWC,GACnB,OAAOC,OAAOX,EAAOU,EAAST,IAAKW,EAAMC,KAAKC,UAAW,MAYzDC,UAVD,SAEgBA,EAAWC,GAC1B,OAAO,SAAoBN,GAC1B,OAAOC,OAAOX,EAAOU,EAAST,IAAKW,EAAMC,KAAKC,UAAW,IAAKE,KAO/DC,QDhCc,gBCkCfT,EAAiB,WAAIA"
}