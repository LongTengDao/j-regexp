{
	"version":
		3,
	"file":
		"j-regexp.min.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","groupify.ts","newRegExp.ts","clearRegExp.ts","export.ts"],
	"sourcesContent":
		[
			"export default '7.0.0';",
			"import create from '.Object.create?=';\nimport NULL from '.null.prototype';\n\nvar NEED_TO_ESCAPE_IN_REGEXP = /^[$()*+\\-.?[\\\\\\]^{|]/;\nvar SURROGATE_PAIR = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nvar GROUP = create(NULL)         ;\n\nexport default function groupify (branches                   , uFlag          , noEscape          )         {\n\tvar group = create(NULL)         ;\n\tvar appendBranch = uFlag ? appendPointBranch : appendCodeBranch;\n\tfor ( var length         = branches.length, index         = 0; index<length; ++index ) { appendBranch(group, branches[index]); }\n\treturn sourcify(group, !noEscape);\n};\n\nfunction appendPointBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar character         = SURROGATE_PAIR.test(branch) ? branch.slice(0, 2) : branch.charAt(0);\n\t\tappendPointBranch(group[character] || ( group[character] = create(NULL)          ), branch.slice(character.length));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction appendCodeBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar character         = branch.charAt(0);\n\t\tappendCodeBranch(group[character] || ( group[character] = create(NULL)          ), branch.slice(1));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction sourcify (group       , needEscape         )         {\n\tvar branches           = [];\n\tvar singleCharactersBranch           = [];\n\tvar noEmptyBranch          = true;\n\tfor ( var character in group ) {\n\t\tif ( character ) {\n\t\t\tvar sub_branches         = sourcify(group[character], needEscape);\n\t\t\tif ( needEscape && NEED_TO_ESCAPE_IN_REGEXP.test(character) ) { character = '\\\\'+character; }\n\t\t\tsub_branches ? branches.push(character+sub_branches) : singleCharactersBranch.push(character);\n\t\t}\n\t\telse { noEmptyBranch = false; }\n\t}\n\tsingleCharactersBranch.length && branches.unshift(singleCharactersBranch.length===1 ? singleCharactersBranch[0] : '['+singleCharactersBranch.join('')+']');\n\treturn branches.length===0\n\t\t? ''\n\t\t: ( branches.length===1 && ( singleCharactersBranch.length || noEmptyBranch )\n\t\t\t? branches[0]\n\t\t\t: '(?:'+branches.join('|')+')'\n\t\t)\n\t\t+( noEmptyBranch ? '' : '?' );\n}\n\n                                            \n",
			"import RegExp from '.RegExp';\nimport isArray from '.Array.isArray?=';\nimport apply from '.Reflect.apply?=';\n\nimport groupify from './groupify';\n\nvar NT = /[\\n\\t]/g;\nvar SEARCH_ESCAPE = /\\\\./g;\nfunction graveAccentReplacer ($$        ) { return $$==='\\\\`' ? '`' : $$; }\nvar flags        ;\nvar u         ;\n\nfunction RE (template                      ) {\n\tvar raw = template.raw;\n\tvar source = raw[0];\n\tfor ( var length = arguments.length, index = 1; index<length; ++index ) {\n\t\tvar value = arguments[index];\n\t\tsource += ( isArray(value) ? groupify(value, u) : value instanceof RegExp ? value.source : value )+raw[index];\n\t}\n\tif ( u ) { source = source.replace(SEARCH_ESCAPE, graveAccentReplacer); }\n\treturn RegExp(source.replace(NT, ''), flags);\n}\n\nexport default function newRegExp (template_flags                               )                                                          {\n\tif ( typeof template_flags==='object' ) {\n\t\tflags = '';\n\t\tu = false;\n\t\treturn /*#__PURE__*/ apply(RE, null, arguments       );\n\t}\n\tvar U = /*#__PURE__*/ template_flags.indexOf('u')>=0;\n\treturn function newRegExp (template                      )         {\n\t\tflags = template_flags;\n\t\tu = U;\n\t\treturn /*#__PURE__*/ apply(RE, null, arguments       );\n\t};\n};\n",
			"import RegExp from '.RegExp';\n\nvar clearRegExp = '$_' in RegExp\n\t? function () {\n\t\tvar REGEXP = /^/;\n\t\treturn function clearRegExp                (value    )                {\n\t\t\tREGEXP.test('');\n\t\t\treturn value;\n\t\t};\n\t}()\n\t: function clearRegExp                (value    )                {\n\t\treturn value;\n\t};\n\nexport default clearRegExp;",
			"import version from './version?text';\nimport newRegExp from './newRegExp';\nimport clearRegExp from './clearRegExp';\nimport groupify from './groupify';\n\nexport {\n\tversion,\n\tnewRegExp,\n\tclearRegExp,\n\tgroupify,\n};\n\nimport Default from '.default?=';\nexport default Default({\n\tversion: version,\n\tnewRegExp: newRegExp,\n\tclearRegExp: clearRegExp,\n\tgroupify: groupify\n});\n"
		],
	"names":
		["NEED_TO_ESCAPE_IN_REGEXP","SURROGATE_PAIR","GROUP","create","NULL","groupify","branches","uFlag","noEscape","group","appendBranch","appendPointBranch","appendCodeBranch","length","index","sourcify","needEscape","singleCharactersBranch","noEmptyBranch","character","sub_branches","test","push","unshift","join","branch","slice","charAt","flags","u","NT","SEARCH_ESCAPE","graveAccentReplacer","$$","RE","template","raw","source","arguments","value","isArray","RegExp","replace","REGEXP","clearRegExp","Default","version","newRegExp","template_flags","apply","U","indexOf"],
	"mappings":
		";;;;;;;;;;+LAAA,wtCCGIA,EAA2B,uBAC3BC,EAAiB,kCACjBC,EAAQC,EAAOC,GAEnB,SAAwBC,EAAUC,EAA6BC,EAAiBC,GAG/E,IAFA,IAAIC,EAAQN,EAAOC,GACfM,EAAeH,EAAQI,EAAoBC,EACrCC,EAAiBP,EAASO,OAAQC,EAAgB,EAAGA,EAAMD,IAAUC,EAAUJ,EAAaD,EAAOH,EAASQ,IACtH,OAmBD,SAASC,EAAUN,EAAcO,GAChC,IAAIV,EAAqB,GACrBW,EAAmC,GACnCC,GAAyB,EAC7B,IAAM,IAAIC,KAAaV,EACtB,GAAKU,EAAY,CAChB,IAAIC,EAAuBL,EAASN,EAAMU,GAAYH,GACjDA,GAAchB,EAAyBqB,KAAKF,KAAeA,EAAY,KAAKA,GACjFC,EAAed,EAASgB,KAAKH,EAAUC,GAAgBH,EAAuBK,KAAKH,QAE7ED,GAAgB,EAGxB,OADAD,EAAuBJ,QAAUP,EAASiB,QAAwC,IAAhCN,EAAuBJ,OAAaI,EAAuB,GAAK,IAAIA,EAAuBO,KAAK,IAAI,KAC7H,IAAlBlB,EAASO,OACb,IACoB,IAAlBP,EAASO,SAAgBI,EAAuBJ,QAAUK,GAC3DZ,EAAS,GACT,MAAMA,EAASkB,KAAK,KAAK,MAEzBN,EAAgB,GAAK,KAtClBH,CAASN,GAAQD,GAGzB,SAASG,EAAmBF,EAAcgB,GACzC,GAAKA,EAAS,CACb,IAAIN,EAAoBlB,EAAeoB,KAAKI,GAAUA,EAAOC,MAAM,EAAG,GAAKD,EAAOE,OAAO,GACzFhB,EAAkBF,EAAMU,KAAgBV,EAAMU,GAAahB,EAAOC,IAAkBqB,EAAOC,MAAMP,EAAUN,cAErGJ,EAAM,IAAMP,EAGpB,SAASU,EAAkBH,EAAcgB,GACxC,GAAKA,EAAS,CACb,IAAIN,EAAoBM,EAAOE,OAAO,GACtCf,EAAiBH,EAAMU,KAAgBV,EAAMU,GAAahB,EAAOC,IAAkBqB,EAAOC,MAAM,SAE1FjB,EAAM,IAAMP,ECrBpB,IAGI0B,EACAC,EAJAC,EAAK,UACLC,EAAgB,OACpB,SAASC,EAAqBC,GAAc,MAAY,QAALA,EAAa,IAAMA,EAItE,SAASC,EAAIC,GAGZ,IAFA,IAAIC,EAAMD,EAASC,IACfC,EAASD,EAAI,GACPvB,EAASyB,UAAUzB,OAAQC,EAAQ,EAAGA,EAAMD,IAAUC,EAAQ,CACvE,IAAIyB,EAAQD,UAAUxB,GACtBuB,IAAYG,EAAQD,GAASlC,EAASkC,EAAOV,GAAKU,aAAiBE,OAASF,EAAMF,OAASE,GAAQH,EAAItB,GAGxG,OADKe,IAAMQ,EAASA,EAAOK,QAAQX,EAAeC,IAC3CS,OAAOJ,EAAOK,QAAQZ,EAAI,IAAKF,GClBvC,IAEMe,EAFFC,EAAc,OAAQH,QAEpBE,EAAS,IACN,SAAqCJ,GAE3C,OADAI,EAAOtB,KAAK,IACLkB,IAGP,SAAqCA,GACtC,OAAOA,qnBCEMM,CAAQ,CACtBC,QJdc,QIedC,UFQD,SAAmCC,GAClC,GAA6B,iBAAjBA,EAGX,OAFApB,EAAQ,GACRC,GAAI,EACiBoB,EAAMf,EAAI,KAAMI,WAEtC,IAAIY,EAAkBF,EAAeG,QAAQ,MAAM,EACnD,OAAO,SAAoBhB,GAG1B,OAFAP,EAAQoB,EACRnB,EAAIqB,EACiBD,EAAMf,EAAI,KAAMI,aEjBtCM,YAAaA,EACbvC,SAAUA"
}